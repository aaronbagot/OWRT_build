#=================================================
# https://github.com/aaronbagot/OWRT_build 
# Inspired by P3TERX @ https://github.com/P3TERX/Actions-OpenWrt
#=================================================

name: Build MiniOpenWrtX86 from Lienol Codes

on:
  repository_dispatch:
  release:
    types: published
  push:
    branches:
      - master
    paths:
      - 'lienol_1907_mini/build.config'
  #schedule:
  #  - cron: 0 8 * * 5
  watch:
    types: started

env:
  FOLDER: lienol_1907_mini
  REPO_URL: https://github.com/Lienol/openwrt
  REPO_BRANCH: 19.07
  FEEDS: feeds.conf.default
  MYCONFIG: build.config
  MYSETTINGS: default.settings
  DIYSH1: diy1.sh
  DIYSH2: diy2.sh  
  SSH_ACTIONS: false
  UPLOAD_BIN_DIR: false
  UPLOAD_IMG: true
  UPLOAD_VHDX: true
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-18.04
    # 防止别人点star，加上这句后只有自己点的（或push）才触发
    if: github.event.repository.owner.id == github.event.sender.id

    steps:
    - name: Checkout
      uses: actions/checkout@master

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        echo '====================Initialization environment===================='
        # sudo swapoff /swapfile
        sudo rm -rf /swapfile /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs gcc-multilib g++-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler antlr3 gperf >> /dev/null 
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir
        source .bashrc
        
    - name: Clone source code
      working-directory: /workdir
      run: |
        echo '====================    Clone source code    ===================='
        df -hT $PWD
        git clone -b $REPO_BRANCH $REPO_URL  openwrt
        # echo "to avoid version check errors (HEAD): (due to clone depth 1)"
        # echo 'Mini_openwrt_v20.x' > openwrt/version
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt
        
    - name: Load custom feeds, run diy1.sh, update packages, and install packages
      run: |
        echo '====================    Load custom feeds    ===================='
        [ -e $FOLDER/$FEEDS ] && mv $FOLDER/$FEEDS openwrt/feeds.conf.default
        chmod +x $FOLDER/$DIYSH1
        cd openwrt
        $GITHUB_WORKSPACE/$FOLDER/$DIYSH1
        ./scripts/feeds clean >> /dev/null 
        ./scripts/feeds update -a >> /dev/null 
        ./scripts/feeds install -a >> /dev/null 

    - name: Load extra files, .config, and default settings; and run diy2.sh
      run: |
        echo '====================    Load extra settings    ===================='
        [ -e $FOLDER/files ] && mv $FOLDER/files openwrt/files
        [ -e $FOLDER/$MYCONFIG ] && mv $FOLDER/$MYCONFIG openwrt/.config
        [ -e $FOLDER/$MYSETTINGS ] && mv $FOLDER/$MYSETTINGS openwrt/package/default-settings/files/zzz-default-settings
        chmod +x $FOLDER/$DIYSH2
        cd openwrt
        $GITHUB_WORKSPACE/$FOLDER/$DIYSH2
        make defconfig

    - name: Download all sources
      id: package
      run: |
        echo '====================    Download all sources    ===================='
        cd openwrt
        make prereq
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: Compile the firmware
      id: compile
      run: |
        echo '====================    Compile the firmware    ===================='
        cd openwrt
        echo -e "$(nproc) thread compile, if failed 1 thread"
        make -j$(nproc) || make -j1 V=sc
        echo "::set-output name=status::success"

    - name: SSH connection to Actions
      uses: aaronbagot/OWRT_build_ssh@master
      # if: env.SSH_ACTIONS == 'true' || contains(github.event.action, 'ssh')
      if: env.SSH_ACTIONS == 'true' && steps.compile.outputs.status != 'success'

    - name: Set Environment Variable
      if: steps.compile.outputs.status == 'success' && !cancelled()
      run: |
        cd openwrt
        FM_TARGET=$(grep "^CONFIG_TARGET_BOARD=" .config | cut -d"=" -f2 | sed -e 's/^"//' -e 's/"$//')
        FM_SUBTARGET=$(grep "^CONFIG_TARGET_SUBTARGET=" .config | cut -d"=" -f2 | sed -e 's/^"//' -e 's/"$//')
        FM_PLATFORM=$(grep "^CONFIG_TARGET_ARCH_PACKAGES=" .config | cut -d"=" -f2 | sed -e 's/^"//' -e 's/"$//')
        FM_PROFILE=$(grep "^CONFIG_TARGET_PROFILE=" .config | cut -d"=" -f2 | sed -e 's/^"//' -e 's/"$//')
        FM_DIR=$GITHUB_WORKSPACE/openwrt/bin/targets/$FM_TARGET/$FM_SUBTARGET
        echo $FM_TARGET $FM_SUBTARGET $FM_PLATFORM $FM_PROFILE $FM_DIR
        echo "FM_TARGET=$FM_TARGET" >> $GITHUB_ENV
        echo "FM_SUBTARGET=$FM_SUBTARGET" >> $GITHUB_ENV
        echo "FM_PLATFORM=$FM_PLATFORM" >> $GITHUB_ENV
        echo "FM_PROFILE=$FM_PROFILE" >> $GITHUB_ENV
        echo "FM_DIR=$FM_DIR" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV
            
    - name: Check space usage
      if: (!cancelled())
      run: |
        df -hT
        echo "=========test env========="
        echo ${{ env.FM_TARGET }} ${{ env.FM_SUBTARGET }} ${{ env.FM_PLATFORM }} ${{ env.FM_PROFILE }} ${{ env.FM_DIR }}  ${{ env.FILE_DATE }} 

    - name: Upload bin directory
      uses: actions/upload-artifact@master
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: OpenWrt_bin_${{ env.FM_PROFILE }}${{ env.FILE_DATE }}
        path: openwrt/bin

    - name: Organize img and remove others others
      id: organize
      if: steps.compile.outputs.status == 'success' && !cancelled()
      run: |
        cd openwrt/bin/targets/$FM_TARGET/$FM_SUBTARGET
        ls -al 
        shopt -s nullglob extglob
        rm -rf !(*.img*) || true
        rm -rf *rootfs*  || true
        for a in *.img ; do gzip -9qf "$a" ; done
        rm -rf !(*.gz)
        ls -al
        echo "::set-output name=status::success"
        
    - name: Upload firmware IMG
      uses: actions/upload-artifact@master
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_IMG == 'true'
      with:
        name: OpenWrt_IMG_${{ env.FM_PLATFORM }}_${{ env.FM_PROFILE }}${{ env.FILE_DATE }}
        path: ${{ env.FM_DIR }}

    - name: Convert VHDX and keep only vhdx
      id: convertvhdx
      # 如果 if: ${{ always() }} && steps.organize.outputs.status == 'success' 则不论后半什么结果，都是TRUE
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_VHDX == 'true'
      run: |
        cd openwrt/bin/targets/$FM_TARGET/$FM_SUBTARGET
        shopt -s nullglob extglob
        for a in *.img.gz ; do gzip -dqf "$a" ; done
        for a in *.img
        do
          qemu-img convert -f raw -O vhdx -o subformat=dynamic "$a" "$a".vhdx || continue
          gzip -9qf "$a".vhdx || continue
        done
        rm -rf !(*.gz)
        echo "::set-output name=status::success"
        
    - name: Upload firmware VHDX
      uses: actions/upload-artifact@master
      if: steps.convertvhdx.outputs.status == 'success' && env.UPLOAD_VHDX == 'true'
      with:
        name: OpenWrt_VHDX_${{ env.FM_PLATFORM }}_${{ env.FM_PROFILE }}${{ env.FILE_DATE }}
        path: ${{ env.FM_DIR }}
